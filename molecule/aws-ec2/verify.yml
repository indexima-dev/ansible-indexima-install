---
# Verify that Hive, Monitor and Dev Console are reachable. Check that the number of up node is the requested one

- name: Verify
  hosts: all
  vars:
    hive_port: 10000
  tasks:
    - name: Wait for Hive server
      wait_for:
        host: "{{ ansible_host }}"
        port: "{{ hive_port }}"
        timeout: 300
      when: is_master == 1

    - name: Wait for Monitor server
      wait_for:
        host: "{{ ansible_host }}"
        port: 9999
        timeout: 300
      when: is_master == 1

    - name: Wait for Dev console
      wait_for:
        host: "{{ ansible_host }}"
        port: 8082
        timeout: 300
      when: is_master == 1

    - name: Check if all nodes are up
      uri:
        url: "http://{{ ansible_host }}:9999/api/get/nodes"
        follow_redirects: none
        method: GET
      register: _result
      until:
        - _result.status == 200
        - _result.json.nodesDown |length == 0
        - _result.json.nodesUp | length == nodes
      retries: 12 # 12 * 5 seconds = 1min
      delay: 5 # Every 5 seconds

    - name: Check if warehouse is created
      amazon.aws.aws_s3:
        bucket: "{{ indexima_bucket_name }}"
        prefix: "{{ indexima_bucket_prefix }}/warehouse"
        mode: list
      register: _s3_list
      delegate_to: localhost
      failed_when: _s3_list.s3_keys | length == 0

    - name: Check if visualdoop-data are created
      amazon.aws.aws_s3:
        bucket: "{{ indexima_bucket_name }}"
        prefix: "{{ indexima_bucket_prefix }}/visualdoop-data"
        mode: list
      register: _s3_list_vd
      delegate_to: localhost
      failed_when: _s3_list_vd.s3_keys | length == 0

    - name: Cat galactica.conf
      shell: cat /opt/indexima/galactica/conf/galactica.conf
      register: _galactica_conf

    - name: Check that partitions = 4
      assert:
        that:
          - "'partitions = 4' in _galactica_conf.stdout"
        fail_msg: "partitions is not equal 4 in galactica.conf: {{ _galactica_conf.stdout }}"

    - name: Check that cores = 2
      assert:
        that:
          - "'cores = 2' in _galactica_conf.stdout"
        fail_msg: "cores is not equal 2 in galactica.conf: {{ _galactica_conf.stdout }}"

    - name: Check that readers = 1
      assert:
        that:
          - "'readers = 1' in _galactica_conf.stdout"
        fail_msg: "readers is not equal 1 in galactica.conf: {{ _galactica_conf.stdout }}"

    - name: Check this comes from s3
      assert:
        that:
          - "'this comes from s3' in _galactica_conf.stdout"
        fail_msg: "cores is not equal 1 in galactica.conf: {{ _galactica_conf.stdout }}"

    - name: Check that cluster.name does not exist
      assert:
        that:
          - "'cluster.name = ' not in _galactica_conf.stdout"

    - name: Check that log.dir is /var/log/indexima/logs
      assert:
        that:
          - "'log.dir = /var/log/indexima/logs' in _galactica_conf.stdout"

    - name: Check that hive.log.dir is /var/log/indexima/hive
      assert:
        that:
          - "'hive.log.dir = /var/log/indexima/hive' in _galactica_conf.stdout"

    - name: Check that history.dir is in S3
      assert:
        that:
          - "'history.dir = s3a://{{ indexima_bucket_name }}/molecule/s3test/history' in _galactica_conf.stdout"

    - name: Check that history.export is in S3
      assert:
        that:
          - "'history.export = s3a://{{ indexima_bucket_name }}/molecule/s3test/history_csv' in _galactica_conf.stdout"

    - name: Cat galactica-env.sh
      shell: cat /opt/indexima/galactica/conf/galactica-env.sh
      register: _galactica_env

    - name: Check that galactica mem = 1393m
      assert:
        that:
          - "'GALACTICA_MEM=1393m' in _galactica_env.stdout"
        fail_msg: "ram is not equal 1393: {{ ansible_memtotal_mb }} in galactica-env: {{ _galactica_env.stdout }}"

    - name: Check that GC_OPTIONS is default
      assert:
        that:
          - '''GC_OPTIONS="-XX:+UseConcMarkSweepGC -XX:-OmitStackTraceInFastThrow"'' in _galactica_env.stdout'

    - name: Cat visualdoop2/config..sh
      shell: cat /opt/indexima/visualdoop2/config.sh
      register: _vd2_config
      when: inventory_hostname == "instance1"

    - name: Check that MONITOR_API_KEY is MyTestApiKey
      assert:
        that:
          - "'MONITOR_API_KEY=MyTestApiKey' in _vd2_config.stdout"
        fail_msg: "MONITOR_API_KEY is not MyTestApiKey"
      when: inventory_hostname == "instance1"

    - name: Check that CLUSTER_MODE is true
      assert:
        that:
          - "'CLUSTER_MODE=true' in _vd2_config.stdout"
        fail_msg: "CLUSTER_MODE is not true"
      when: inventory_hostname == "instance1"

    - name: Check that PROJECT_MODE is true
      assert:
        that:
          - "'PROJECT_MODE=true' in _vd2_config.stdout"
        fail_msg: "PROJECT_MODE is not true"
      when: inventory_hostname == "instance1"
