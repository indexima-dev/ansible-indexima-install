---
# tasks file for indexima-prerequisites

- name : prerequisites.yaml / Install unzip and java8 on CentOS
  yum:
    name:
      - unzip
      - "{{ java_package_centos }}"
      - "{{ java_jdk_rhel }}"
  when: ansible_facts['os_family'] == "RedHat"

- name: prerequisites.yaml/ Install unzip, software-properties-common and java8 on Debian
  apt:
    name:
      - unzip
      - software-properties-common
      - "{{ java_package_debian }}"
      - "{{ java_jre_debian }}"
    update_cache: yes
  when: ansible_facts['os_family'] == "Debian"

- name: prerequisites.yaml/ Set java_home for CentOS
  set_fact:
    java_home: /usr/lib/jvm/jre-1.8.0-openjdk
  when: ansible_facts['os_family'] == "RedHat"

- name: prerequisites.yaml/ Set java_home for Debian
  set_fact:
    java_home: /usr/lib/jvm/java-1.8.0-openjdk-amd64
  when: ansible_facts['os_family'] == "Debian"

- name: prerequisites.yaml / Download Hadoop {{ hadoop_version }}
  get_url:
    url: "{{ hadoop_url }}"
    dest: "{{ hadoop_archive }}"
  tags: ['hadoop', 'web']
  when: internet == 1

- name: prerequisites.yaml / Copy Hadoop tar.gz archive
  copy:
    src: "{{ hadoop_file }}.tar.gz"
    dest: "{{ hadoop_archive }}"
    owner: "{{ service_user }}"
    group: "{{ service_group }}"
    mode: '0644'
  tags: ['hadoop']
  when: internet == 0

- name: prerequisites.yaml / Extract hadoop_archive
  unarchive:
    remote_src: yes
    src: "{{ hadoop_archive }}"
    dest: "{{ install_path }}"
    owner: "{{ service_user }}"
    group: "{{ service_group }}"
  tags: ['hadoop']

- name: prerequisites.yaml / Add hadoop_base to the PATH
  copy:
    dest: /etc/profile.d/custom-path.sh
    content: 'PATH=$PATH:/usr/local/bin:{{ hadoop_base }}/bin:{{ hadoop_base }}/sbin'
    owner: "root"
    group: "root"
    mode: '0755'
  tags: ['hadoop', 'env']

- name: prerequisites.yaml / Set ulimit 1000000
  lineinfile:
    path: /etc/security/limits.conf
    regexp: '\*\s*-\s*nofile\s*65536'
    line: '*        -     nofile  1000000'
  tags: ['etc']

- name: prerequisites.yaml / Install nginx with amazon linux extra
  command:
    cmd: amazon-linux-extras install nginx1.12=latest -y
    creates: /sbin/nginx
  when: ansible_facts['distribution'] == "Amazon"
